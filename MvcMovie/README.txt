Date :  2024-01-24 18:30

Creating a web application by using Asp.net framework following instructions as per https://learn.microsoft.com/en-us/aspnet/core/tutorials/first-mvc-app/start-mvc?view=aspnetcore-8.0&tabs=visual-studio

Part 1:
Installed Visual code and started working on part 1 on the above mentioned web page to develop a app based on ASP.NET MVC framework
run code without debugging just to execute by http and got the required result
Added picture as instructions provided by prof

Part 2:
Created and added a controller by clicking on controller > Add > Controller named it as HelloWorldController
Modified index webpage and Welcome webpage
Things Learned: 
Understood ASP.NET framework
Understood Model View Controller in a web design
first hands on c#

Part 3: 
Modify the HelloWorldController class to use Razor view files, encapsulating the process of generating HTML responses
Created a View by clicking on Views > Add > New Item >'name' > create a new item as Index.cshtml.
Modified code and run the code displayed Index.
Things Learned: Adding a to the webpage
Problems Faced: Faced few errors while coping the cody and paas the code on to view was able to sort it in couple iterations

date : 08-02-2024 : 14:00
Part 4 : 
classes are added for managing movies in a database. These classes are the "Model" part of the MVC app.Next 
Right clicked on controllers > Add > New Scaffolded Item. Named it, clicked on Add.
Created a scaffolding
Created Migration to update a database to match the data model.
Tools > NuGet Package Manager > Package Manager Console
PowerShell: 	
	Add-Migration InitialCreate
	Update-Database
A new migration file has been created

Part 5: Working with Database
The MvcMovieContext object handles the task of connecting to the database and mapping Movie objects to database records. The database context is registered with the Dependency Injection container in the Program.cs file
View menu option in the task bar > "SQL Server Object Explorer" > SQL Server Object Explorer page which shows SQL Server data on dbo.Movie design.
Created a new class named SeedData in the Models folder. Replaced the generated code with code in tutorial

Part 6: Controller Methods and Views
Added the code to show the release date
Used AnchorTagHelper dynamically generates the HTML href attribute value from the controller action method and route id. You use View Source from your favorite browser or use the developer tools to examine the generated markup

Part 7:
Added search to an ASP.NET Core MVC app
Navigated to /Movies/Index. Appended a query string such as ?searchString=Ghost to the URL. The filtered movies are displayed.
Changed the parameter to id and changea all occurrences of searchString to id.
The updated Index method with id parameter are displayed once the code is executed.
Added search by genre to the Index view

Part 8: 
Added the rating property within Models/Movie.cs and writing and updated Bind
Added Rate field to seed data
Updated the SeedData class so that it provides a value for the new column. A sample change is shown below, but you'll want to make this change for each new Movie.

Part 9: 
Added validation rules to the movie model
disabled jQuery date validation to use the Range attribute with DateTime.
Picked up the validation rules that you specified by using validation attributes on the properties of the Movie model class.
problems  faced: couldnot load the webpage once I have updated the code as in tutorial becuase rating form action was not added

Part 10: Reviewed the app and made some improvements to the automatically generated Details and Delete methos.	
In exploring the HelloMoviesController's Details action method, I've gained insight into how the loop functions during code execution. This method handles GET requests with three URL segments:Movies, Details, and an id value. It was automatically generated by the scaffolding engine.

I've also examined the Delete action method within the Movies controller. It employs a method to retrieve a movie's details view for the specified movie ID. However, it's crucial to highlight a security vulnerability: deleting data in response to a GET request exposes potential risks.
[HttpPost, ActionName("Delete")] with action named DeleteConfirmed. When the solution method with ActionName("Delete") and attribute to 
DeleteConfirmed method.